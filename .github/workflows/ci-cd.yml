name: CI/CD Pipeline - Blue/Green Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===========================================
  # Test & Build Job
  # ===========================================
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Run tests
      run: ./gradlew test
      
    - name: Build application
      run: ./gradlew build -x test
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: build/libs/*.jar
        retention-days: 7

  # ===========================================
  # Security Scan Job
  # ===========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===========================================
  # Build Docker Image Job
  # ===========================================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===========================================
  # Deploy to Staging (Green) Job
  # ===========================================
  deploy-staging:
    name: Deploy to Staging (Green)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment (Green)"
        # 여기에 실제 배포 스크립트 추가
        # 예: SSH를 통한 원격 서버 배포 또는 클라우드 플랫폼 배포
        
    - name: Run health check
      run: |
        echo "Running health check for staging environment"
        # 헬스체크 스크립트 추가
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Staging deployment completed"
        # 슬랙, 이메일 등 알림 추가

  # ===========================================
  # Deploy to Production (Blue/Green) Job
  # ===========================================
  deploy-production:
    name: Deploy to Production (Blue/Green)
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine deployment strategy
      id: strategy
      run: |
        # 현재 활성 환경 확인 (Blue 또는 Green)
        CURRENT_ENV=$(curl -s http://your-domain.com/admin/current-env || echo "blue")
        if [ "$CURRENT_ENV" = "blue" ]; then
          echo "target-env=green" >> $GITHUB_OUTPUT
          echo "current-env=blue" >> $GITHUB_OUTPUT
        else
          echo "target-env=blue" >> $GITHUB_OUTPUT
          echo "current-env=green" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to target environment
      run: |
        echo "Deploying to ${{ steps.strategy.outputs.target-env }} environment"
        # 대상 환경에 새 버전 배포
        
    - name: Wait for deployment to be ready
      run: |
        echo "Waiting for ${{ steps.strategy.outputs.target-env }} environment to be ready"
        # 배포 완료 대기 및 헬스체크
        
    - name: Switch traffic to new environment
      run: |
        echo "Switching traffic to ${{ steps.strategy.outputs.target-env }} environment"
        # Nginx 설정 업데이트 또는 로드밸런서 설정 변경
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment"
        # 배포 검증 (응답 시간, 에러율 등)
        
    - name: Rollback if needed
      if: failure()
      run: |
        echo "Rolling back to ${{ steps.strategy.outputs.current-env }} environment"
        # 실패 시 이전 환경으로 롤백
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "Production deployment completed"
        # 슬랙, 이메일 등 알림 추가

  # ===========================================
  # Cleanup Job
  # ===========================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images"
        # 오래된 Docker 이미지 정리
        
    - name: Cleanup old deployments
      run: |
        echo "Cleaning up old deployments"
        # 오래된 배포 정리 